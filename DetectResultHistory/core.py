import loggingimport threadingimport tracebackfrom concurrent.futures import ThreadPoolExecutorfrom tornado.concurrent import run_on_executorimport osimport sys# Time:2019-03-30 Author:JiangShuaisys.path.append("/home/ksht/") #windows环境不用管 linux是应用的路径os.environ['DJANGO_SETTINGS_MODULE'] = 'Similarity_Detection.settings'  # 项目的settingsfrom django.core.wsgi import get_wsgi_applicationapplication = get_wsgi_application()from django.utils import timezone # 带时区的时间from django.contrib.sessions.models import Sessionfrom django.db.models import F#上面过程是引用Django的ORM模型import timeimport tornado.webimport tornado.websocketimport tornado.httpserverimport tornado.ioloopimport threadingimport jsonimport requestsimport base64from Similarity_Detection import settings# 服务器发消息时判断连接是否已断开def WriteMessage(self,message):    global Msg_lock    if self.state_alive:        try:            self.write_message(message)        except Exception as e:            info = sys.exc_info()            for file, lineno, function, text in traceback.extract_tb(info[2]):                print("write",file, "line:", lineno, "in", function)                print("write",text)            print("write","** %s: %s" % info[:2])        # finally:        #     Msg_lock.release()    else:        print(self.userid,"句柄已经更新")# 互粉主逻辑class HufenHandler(tornado.websocket.WebSocketHandler):    executor = ThreadPoolExecutor(500)    def check_origin(self, origin):        return True    def open(self):        self.state_alive = True        pass    @run_on_executor    def on_message(self, message):        message = json.loads(message)    def on_close(self):        self.state_alive = Falseclass Application(tornado.web.Application):    def __init__(self):        handlers = [            (r"/ws",HufenHandler),        ]        settings = {            'debug': True        }        tornado.web.Application.__init__(self, handlers,**settings)if __name__ == '__main__':    ws_app = Application()    server = tornado.httpserver.HTTPServer(ws_app)    server.listen(8081)    tornado.ioloop.IOLoop.instance().start()